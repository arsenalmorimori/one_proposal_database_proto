@page "/activities"
@using Microsoft.EntityFrameworkCore
@using one_db_prototype_chilibean.Model
@using one_db_prototype_chilibean.Data
@inject AppDbContext DbContext
@inject NavigationManager DevViewNavigation

<h3>All Activities</h3>

@if (activities == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Club</th>
                <th>Date</th>
                <th>Brief Description</th>
                <th>Status</th>
                <th>Budget Items</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in activities)
            {
                <tr>
                    <td>@activity.Profile.activity_id</td>
                    <td>@activity.Profile.activity_title</td>
                    <td>@activity.Club?.club_name</td>
                    <td>@activity.Brief?.activity_date</td>
                    <td>@activity.Brief?.activity_brief_description</td>
                    <td>@activity.Status?.activity_overall_status</td>
                    <td>
                        @if (activity.BudgetPlans != null)
                        {
                            <ul>
                                @foreach (var item in activity.BudgetPlans)
                                {
                                    <li>@item.item_name: @item.price.ToString("C") x @item.quantity</li>
                                }
                            </ul>
                        }
                    </td>
                    <td>
                        <a href=$"/activities/edit/{activity.Profile.activity_id}" class="btn btn-sm btn-primary">Edit</a>
                        <button @onclick="async () => await DeleteActivity(activity.Profile.activity_id)"
                        class="btn btn-sm btn-danger">
                            Delete
                        </button>
                         <button @onclick="() => GoToDetails(activity.Profile.activity_id)" 
                                 class="btn btn-sm btn-info"> 
                             Details 
                         </button> 

                    @code { 
                    [Inject] 
                    private NavigationManager Navigation { get; set; } 

                    private void GoToDetails(Guid activityId) 
                     { 
                         DevViewNavigation.NavigateTo($"/activities/details/{activityId}"); 
                     } 
                }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <a href="/activities/create" class="btn btn-success">Create New Activity</a>
}

@code {
    private List<ActivityViewModel> activities = new();

    protected override async Task OnInitializedAsync()
    {
        // Load all related data in one query
        var profiles = await DbContext.activity_profile_tbl
            .Include(p => p.Club)
            .Include(p => p.ActivityBrief)
            .Include(p => p.ActivityDetail)
            .Include(p => p.ActivityStatus)
            .Include(p => p.RemarksActivity)
            .Include(p => p.ActivityBudgetPlans)
            .ToListAsync();

        activities = profiles.Select(p => new ActivityViewModel
            {
                Profile = p,
                Club = p.Club,
                Brief = p.ActivityBrief,
                Detail = p.ActivityDetail,
                Status = p.ActivityStatus,
                Remarks = p.RemarksActivity,
                BudgetPlans = p.ActivityBudgetPlans?.ToList() ?? new List<ActivityBudgetPlan>()
            }).ToList();
    }

    private async Task DeleteActivity(Guid activityId)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this activity?");
        if (!confirm) return;

        using var transaction = await DbContext.Database.BeginTransactionAsync();
        try
        {
            // Delete budget plans first
            var budgets = DbContext.activity_budget_plan_tbl
                .Where(b => b.activity_id == activityId);
            DbContext.activity_budget_plan_tbl.RemoveRange(budgets);

            // Delete other related entities
            var brief = await DbContext.activity_brief_tbl.FindAsync(activityId);
            if (brief != null) DbContext.activity_brief_tbl.Remove(brief);

            var detail = await DbContext.activity_detail_tbl.FindAsync(activityId);
            if (detail != null) DbContext.activity_detail_tbl.Remove(detail);

            var status = await DbContext.activity_status_tbl.FindAsync(activityId);
            if (status != null) DbContext.activity_status_tbl.Remove(status);

            var remarks = await DbContext.remarks_activity_tbl.FindAsync(activityId);
            if (remarks != null) DbContext.remarks_activity_tbl.Remove(remarks);

            // Finally delete the main profile
            var profile = await DbContext.activity_profile_tbl.FindAsync(activityId);
            if (profile != null)
            {
                DbContext.activity_profile_tbl.Remove(profile);
                await DbContext.SaveChangesAsync();
                await transaction.CommitAsync();
                await OnInitializedAsync(); // Refresh the list
            }
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            // Consider showing an error message to the user
            Console.WriteLine($"Error deleting activity: {ex.Message}");
        }
    }
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}